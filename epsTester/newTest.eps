%!PS
300 400 translate       % get somewhere in the middle
/point0 [0 0] def
/point1 [0 20] def
/point2 [-20 20] def
/point3 [-20 0] def
/nextline {
        % here's how the nextline function works. we have a box like so:
        %     point2 .____________. point1
        %            |            |
        %            |            |
        %            |            |
        %            |            |
        %     point3 .____________. point0
        % I've drawn it nicely horizontally/vertically, but really these will
        % be at weird angles to each other (except the first iteration). we draw
        % a line from point1 to point0, except we go PAST point0 by 5 units
        % (i.e, just a wee bit). that new point becomes the new point1, point3
        % becomes the new point0, the old point2 becomes the new point3, and
        % so on. keep doing that and you get a pretty spirally box thing.
        /xdiff point0 0 get point1 0 get sub def
        /ydiff point0 1 get point1 1 get sub def
        /alpha xdiff ydiff atan def
        % define the new target point
        /ntp [  % the new x co-ordinate
                point0 0 get 5 alpha sin mul add
                % the new y co-ordinate
                point0 1 get 5 alpha cos mul add] def

        % draw the line
        ntp 0 get ntp 1 get lineto

        % cycle back the points
        /point0 point3 def
        /point3 point2 def
        /point2 point1 def
        /point1 ntp def
} def
point1 0 get point1 1 get moveto
600 {nextline} repeat
stroke
showpage